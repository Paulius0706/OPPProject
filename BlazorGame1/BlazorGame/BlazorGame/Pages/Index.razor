@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorGame.Game.Command
@using BlazorGame.Game.GameComponents.Units
@using BlazorGame.Game.GameObjects
@using BlazorGame.Game.GameComponents.RendersDecorum
@using BlazorGame.Game.Memento
@using Game

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
<p> PlayerID:@playerId inputXY:@InputX @InputY velocity:@VelX @VelY position:@PosX @PosY cannonDirection:@MousePosX @MousePosY shooting: @Shooting</p>

<input type="text" @bind="nameInput" />
<button type="button" @onclick="PlayGame"> Start Play </button>
<div @ref="focusRef" tabindex="0" @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" @onmousemove="OnMouseMove" @onmouseup="OnMouseUp" @onmousedown="OnMouseDown">
    <BECanvas @ref="myCanvas" Width="1280" Height="720"></BECanvas>
</div>


Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    public string nameInput = "Guest";
    public int playerId = -1;
    public int InputX = 0;
    public int InputY = 0;
    public int VelX = 0;
    public int VelY = 0;
    public int PosX = 0;
    public int PosY = 0;
    public float MousePosX = 0;
    public float MousePosY = 0;
    public bool Shooting = false;

    public PlayerObject Player
    {
        get { return (MainFrame.GameObjects[playerId] as PlayerObject); }
        set { MainFrame.GameObjects[playerId] = value; }
    }

    protected BECanvasComponent myCanvas;
    private Canvas2DContext context;
    private ElementReference focusRef;
    public bool mementoStuff = false;
    public Experience experience;


    public async void PlayGame()
    {
        playerId = Game.MainFrame.CreateNewPlayer(nameInput);

        if (Game.MainFrame.careTaker.contains(nameInput))
        {
            mementoStuff = true;
            experience = Game.MainFrame.careTaker.get(nameInput).getState();
        }

        context = await this.myCanvas.CreateCanvas2DAsync();
        Game.MainFrame.UpdateEvent += async date =>
        {
            await InvokeAsync(() =>
            {
                if (MainFrame.GameObjects.ContainsKey(playerId))
                {
                    VelX = (int)Game.MainFrame.GameObjects[playerId].Velocity[0];
                    VelY = (int)Game.MainFrame.GameObjects[playerId].Velocity[1];
                    PosX = (int)Game.MainFrame.GameObjects[playerId].Position[0];
                    PosY = (int)Game.MainFrame.GameObjects[playerId].Position[1];

                }
                if(mementoStuff){
                    mementoStuff = false;
                    Game.MainFrame.GameObjects[playerId].GetComponent<Player>().experiance = experience.Exp;
                    Game.MainFrame.GameObjects[playerId].GetComponent<Player>().level = experience.Level;
                }
                Render();
                StateHasChanged();

            });
        };
        StateHasChanged();
    }
    protected override async void OnAfterRender(bool firstRender) { if (firstRender) { } }
    // send message
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        string key = e.Key;
        if (e.Key == "w" || e.Key == "W") { InputY = -1; }
        if (e.Key == "s" || e.Key == "S") { InputY = 1; }
        if (e.Key == "a" || e.Key == "A") { InputX = -1; }
        if (e.Key == "d" || e.Key == "D") { InputX = 1; }
        if (Game.MainFrame.GameObjects.ContainsKey(playerId)) { Player.SetInputs(InputX, InputY); }
    }
    private void HandleKeyUp(KeyboardEventArgs e)
    {
        string key = e.Key;
        if ((e.Key == "w" || e.Key == "W") && InputY == -1) { InputY = 0; }
        if ((e.Key == "s" || e.Key == "S") && InputY == 1) { InputY = 0; }
        if ((e.Key == "a" || e.Key == "A") && InputX == -1) { InputX = 0; }
        if ((e.Key == "d" || e.Key == "D") && InputX == 1) { InputX = 0; }
        if (Game.MainFrame.GameObjects.ContainsKey(playerId)) { Player.SetInputs(InputX, InputY); }
    }
    private void OnMouseMove(MouseEventArgs e)
    {
        MousePosX = (int)e.OffsetX - Game.MainFrame.OffsetX;
        MousePosY = (int)e.OffsetY - Game.MainFrame.OffsetY;
        if (Game.MainFrame.GameObjects.ContainsKey(playerId)) { Player.SetCannons((int)e.OffsetX, (int)e.OffsetY); }
    }
    private void OnMouseUp(MouseEventArgs e)
    {
        if (e.Button == 0 && playerId != -1)
        {
            Shooting = false;
            if (Game.MainFrame.GameObjects.ContainsKey(playerId)) { Player.SetShooting(false); }
        } 
    }
    private void OnMouseDown(MouseEventArgs e)
    {
        if (e.Button == 0 && playerId != -1)
        {
            Shooting = true;
            if (Game.MainFrame.GameObjects.ContainsKey(playerId)) { Player.SetShooting(true); }
        }
    }
    private void Render(){
        this.context.SetFillStyleAsync("lightgray");
        this.context.FillRectAsync(0, 0, 1280, 720);
        int xoffset = (int)PosX - Game.MainFrame.OffsetX;
        int yoffset = (int)PosY - Game.MainFrame.OffsetY;
        foreach(GameObject gameObject in MainFrame.GameObjects.Values){
            if (gameObject.ContainsComponent<Renders>() )
                gameObject.GetComponent<Renders>().Render(ref context, xoffset, yoffset);
        }
        MainFrame.RenderScores(ref this.context);
        if (Game.MainFrame.GameObjects.ContainsKey(playerId)) { Player.RenderUI(); }

    }
}